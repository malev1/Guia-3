If = si
else = sino


*Condicional segun = SWITCH 
case + num. si para dos nums distintos tenemos la misma respuesta ponemos:
case 1:
case 2: sout "mensaje");
el de otro modo (sino para segun) es 'default'
<acciones>

BREAK luego de cada case 
-Es necesaria su presencia, necesario para que una vez que se ejecuta el bloque de 
codigo, se detenga en la opcion correcta y no continue al proximo
caso.
-Detiene la ejecucion de un caso para los SWITCH.
Termimna imprimiendo un doble msj porque sigue con la opcion de abajo.

ELSE IF 
es un Sino Si 
No es un anidado, es:
concatenado expresiones condicionales
-si se cumple la primera condicion esta bien -sino si- (si no se cumple) se ejecuta
el bloque de codigo de abajo y asi constantemente hasta que funcione.  

RUN FILE: 
ejecutamos el archivo en uso 
shift + f6


DEBUG 
Funcion paso a paso de ejecucion.
Nos sirve para aprender como funciona un programa o descubrir errores de logica en programacion.

BREAK POINT 
Puntos de interrupcion.
Identificamos nro de linea y le damos a la opcion.
El programa se detiene alli cuando seleccionamos DEBUG. 
Podemos tener la cantidad que necesitemos.
Podemos incluirlo en una linea donde se cumple la condicion. 
(breakpoint->propiedades. condiciones: la que nos hace falta)
 
SENTENCIAS DE SALTO 
Nos permiten cambiar el flujo normal del bucle. 

DO WHILE = hacer mientras
WHILE = mientras 

FOR = para 
nuestro bucle se hace 
variable (ej int) 

CONTINUE;
permite detener la vuelta del bucle actual y saltar a la siguiente vuelta.
ej pares e impares. 


Glosario de Java
String -----> Cadena (multiple characters)
byte  -----> Entero (From +127 to -128)
short -----> Entero (From +32,768 to -32,767)
int -----> Entero (From  2,147,483,647 to -2,147,483,648)

long -----> Entero (From +9,223,372,036,854,775,807 to -9,223,372,036,854,775,808)
float -----> Reales (From 3.402,823,5 E+38 to 1.4 E-45)
double -----> Reales (From 1.797,693,134,862,315,7 E+308 to 4.9 E-324)
boolean -----> Logico (true-false)

if ----> Si
else ----> SiNo
switch ----> Segun
while ----> Mientras
do - While ----> Hacer - Mientras Que
for ----> Para

Operadores lógicos
&& ----> Y (evalúa todas las condiciones)
& = Y (evalúa hasta que encuentre un falso)
|| = O (evalúa todas las condiciones)
| = O  (evalúa hasta que encuentre un verdadero)
== igual para comparación
= igual de asignación
! negación
!= desigual

Operadores aritméticos
suma = x+y;
resta = x-y;
multiplicación = x*y;
división = x/y;
mod = x%y;
x += 5; // es lo mismo que x = x + 5, en ambos casos x resulta = 10
+= acumular
-= disminuir (lo mismo que el ejemplo de x += 5 pero restando)
/= dividir (lo mismo que el ejemplo de x += 5 pero dividiendo)
*= multiplicar (lo mismo que el ejemplo de x += 5 pero multiplicando)
%= modulo (lo mismo que el ejemplo de x += 5 pero sacando módulo)
x = 5;
x++; //x + 1; x = 6; (incrementa en uno)
x--; //x - 1; x = 5; (decrece en uno)
/*Se puede usar como prefijo y aumentar/disminuir un valor antes de operar/asignar;
x++ o ++x*/







